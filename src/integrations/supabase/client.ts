// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Supabase client configured from environment variables.
// Support both Vite (import.meta.env.VITE_*) and Next-style (process.env.NEXT_PUBLIC_*)
const viteEnv = (typeof import.meta !== 'undefined' && (import.meta as any).env) || {};
const nodeEnv = (typeof process !== 'undefined' && (process as any).env) || {};

const SUPABASE_URL: string | undefined =
  viteEnv.VITE_SUPABASE_URL || nodeEnv.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_ANON_KEY: string | undefined =
  viteEnv.VITE_SUPABASE_ANON_KEY || nodeEnv.NEXT_PUBLIC_SUPABASE_ANON_KEY;

function createMissingEnvProxy() {
  const message =
    'Supabase is not configured. Set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY in .env.local';
  if (typeof console !== 'undefined' && console.error) {
    console.error(message);
  }
  return new Proxy({}, {
    get() {
      throw new Error(message);
    },
    apply() {
      throw new Error(message);
    }
  }) as unknown as ReturnType<typeof createClient<Database>>;
}

// Import the supabase client like this:
// import { supabase } from "/integrations/supabase/client";

export const supabaseConfigured = Boolean(SUPABASE_URL && SUPABASE_ANON_KEY);

export const supabase = (SUPABASE_URL && SUPABASE_ANON_KEY)
  ? createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
      auth: {
        storage: localStorage,
        persistSession: true,
        autoRefreshToken: true,
      }
    })
  : createMissingEnvProxy();